diff -aur emp_command.src/empcommand/engine.py emp_command.patch/empcommand/engine.py
--- emp_command.src/empcommand/engine.py	2013-03-12 16:35:15.851997000 +1100
+++ emp_command.patch/empcommand/engine.py	2013-03-12 16:57:56.417117945 +1100
@@ -40,7 +40,7 @@
 import consts
 
 g_Player = avg.Player.get()
-g_Log = avg.Logger.get()
+#g_Log = avg.Logger.get()
 
 
 class NotImplementedError(Exception):
@@ -360,7 +360,7 @@
         return nseq
         
     def registerState(self, handle, state):
-        g_Log.trace(g_Log.APP, 'Registering state %s: %s' % (handle, state))
+        #g_Log.trace(g_Log.APP, 'Registering state %s: %s' % (handle, state))
         self._parentNode.appendChild(state)
         state.registerEngine(self)
         self.__registeredStates[handle] = state
@@ -381,8 +381,8 @@
             self.__currentState.leave()
 
         newState.enter()
-        g_Log.trace(g_Log.APP, 'Changing state %s -> %s' % (self.__currentState,
-                newState))
+        #g_Log.trace(g_Log.APP, 'Changing state %s -> %s' % (self.__currentState,
+                #newState))
 
         self.__currentState = newState
 
diff -aur emp_command.src/empcommand/gameobjs.py emp_command.patch/empcommand/gameobjs.py
--- emp_command.src/empcommand/gameobjs.py	2013-03-12 16:35:15.855331000 +1100
+++ emp_command.patch/empcommand/gameobjs.py	2013-03-12 17:02:54.820879755 +1100
@@ -40,7 +40,7 @@
 import consts
 
 g_Player = avg.Player.get()
-g_Log = avg.Logger.get()
+#g_Log = avg.Logger.get()
 
 __all__ = ['Explosion', 'Target', 'Missile', 'TextFeedback', 'TouchFeedback', 'Bonus',
         'Turret', 'City', 'Enemy', 'TurretMissile', 'AmmoBonus', 'NukeBonus',
diff -aur emp_command.src/empcommand/__init__.py emp_command.patch/empcommand/__init__.py
--- emp_command.src/empcommand/__init__.py	2013-03-12 16:35:15.825330000 +1100
+++ emp_command.patch/empcommand/__init__.py	2013-03-12 17:03:15.158256619 +1100
@@ -42,7 +42,7 @@
 import consts
 
 g_Player = avg.Player.get()
-g_Log = avg.Logger.get()
+#g_Log = avg.Logger.get()
 
 __all__ = ['app', 'apps', 'EmpCommand', 'VERSION']
 
diff -aur emp_command.src/empcommand/states.py emp_command.patch/empcommand/states.py
--- emp_command.src/empcommand/states.py	2013-03-12 16:35:15.848664000 +1100
+++ emp_command.patch/empcommand/states.py	2013-03-12 17:05:15.065776164 +1100
@@ -42,7 +42,7 @@
 from gameobjs import *
 
 g_Player = avg.Player.get()
-g_Log = avg.Logger.get()
+#g_Log = avg.Logger.get()
 
 
 class Start(engine.FadeGameState):
@@ -320,8 +320,8 @@
         self.playTeaser('Wave %d' % self.__wave)
         self.__waveTimer = g_Player.getFrameTime()
         self.__changeGameState(self.GAMESTATE_PLAYING)
-        g_Log.trace(g_Log.APP, 'Entering wave %d: %s' % (
-                self.__wave, str(self.gameData)))
+        #g_Log.trace(g_Log.APP, 'Entering wave %d: %s' % (
+                #self.__wave, str(self.gameData)))
 
     def playTeaser(self, text):
         self.__teaser.text = text
@@ -487,8 +487,8 @@
             self.__enemiesSpawnTimeline.append(tm)
             tm += avgSpawnTime + random.randrange(-absJitter, absJitter)
         
-        g_Log.trace(g_Log.APP, 'Avg spawn time: %d Abs jitter: %d' % (avgSpawnTime,
-                absJitter))
+        #g_Log.trace(g_Log.APP, 'Avg spawn time: %d Abs jitter: %d' % (avgSpawnTime,
+                #absJitter))
         
     def __checkGameStatus(self):
         if self.__gameState not in (self.GAMESTATE_PLAYING, self.GAMESTATE_ULTRASPEED):
@@ -500,7 +500,7 @@
 
         # Wave end
         if not self.__enemiesSpawnTimeline and not Missile.filter(Enemy):
-            g_Log.trace(g_Log.APP, 'Wave ended')
+            #g_Log.trace(g_Log.APP, 'Wave ended')
             self.engine.changeState('results')
 
         # Switch to ultraspeed if there's nothing the player can do
@@ -524,7 +524,7 @@
         g_Player.setTimeout(1000, lambda: avg.fadeOut(self.__teaser, 3000))
 
     def __changeGameState(self, newState):
-        g_Log.trace(g_Log.APP, 'Gamestate %s -> %s' % (self.__gameState, newState))
+        #g_Log.trace(g_Log.APP, 'Gamestate %s -> %s' % (self.__gameState, newState))
         self.__gameState = newState
 
     def __onExit(self):
